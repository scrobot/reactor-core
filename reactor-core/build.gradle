/*
 * Copyright (c) 2011-2018 Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import me.champeau.gradle.japicmp.JapicmpTask

apply plugin: 'idea' //needed to avoid IDEA seeing the jmh folder as source
apply plugin: 'me.champeau.gradle.jmh'
apply plugin: 'biz.aQute.bnd.builder'
apply plugin: 'org.unbroken-dome.test-sets'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'

ext {
	bndOptions = [
		"Export-Package": [
			"!*internal*",
			"reactor.*"
		].join(","),
		"Import-Package": [
			"!javax.annotation",
			"!javax.annotation.meta",
			'org.slf4j;resolution:=optional;version="[1.5.4,2)"',
			"kotlin.*;resolution:=optional",
			"io.micrometer.*;resolution:=optional",
			"*"
		].join(","),
		"Bundle-Name" : "reactor-core",
		"Bundle-SymbolicName" : "io.projectreactor.reactor-core"
	]
}

testSets {
	withMicrometerTest
}

configurations {
	compileOnly.extendsFrom jsr166backport
	testCompileOnly.extendsFrom jsr166backport
}

dependencies {
	// Reactive Streams
	api "org.reactivestreams:reactive-streams:${reactiveStreamsVersion}"
	testImplementation "org.reactivestreams:reactive-streams-tck:${reactiveStreamsVersion}"

	// JSR-305 annotations
	compileOnly "com.google.code.findbugs:jsr305:$jsr305Version"
	testCompileOnly "com.google.code.findbugs:jsr305:$jsr305Version"

	//Optional Logging Operator
	compileOnly "org.slf4j:slf4j-api:$slf4jVersion"
	testCompileOnly "org.slf4j:slf4j-api:$slf4jVersion"

	//Optional Metrics
	compileOnly "io.micrometer:micrometer-core:$micrometerVersion"

	// Not putting kotlin-stdlib as implementation to not force it as a transitive lib
	compileOnly "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
	testImplementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"

	//Optional JDK 9 Converter
	jsr166backport "io.projectreactor:jsr166:$jsr166BackportVersion"

	testImplementation "junit:junit:$jUnitVersion"

	testRuntimeOnly "ch.qos.logback:logback-classic:$logbackVersion"
	// Testing
	testImplementation(project(":reactor-test")) {
		exclude module: 'reactor-core'
	}

	testImplementation "org.assertj:assertj-core:$assertJVersion"
	testImplementation "org.testng:testng:$testNgVersion"
	testImplementation "org.mockito:mockito-core:$mockitoVersion"
	testImplementation "org.openjdk.jol:jol-core:$javaObjectLayoutVersion"
	testImplementation "pl.pragmatists:JUnitParams:$jUnitParamsVersion"
	testImplementation "org.awaitility:awaitility:$awaitilityVersion"

	// withMicrometerTest is a test-set that validates what happens when micrometer *IS*
	// on the classpath. Needs sourceSets.test.output because tests there use helpers like AutoDisposingRule etc.
	withMicrometerTestImplementation "io.micrometer:micrometer-core:$micrometerVersion"
	withMicrometerTestImplementation sourceSets.test.output

}

jmh {
	include = ["reactor.AssemblyTraceBenchmark.*"]
	resultFormat = 'JSON'
}

task downloadBaseline(type: Download) {
	onlyIfNewer true
	compress true

	src "${repositories.jcenter().url}io/projectreactor/reactor-core/$compatibleVersion/reactor-core-${compatibleVersion}.jar"
	dest "${buildDir}/baselineLibs/reactor-core-${compatibleVersion}.jar"
}

task japicmp(type: JapicmpTask) {
	if (project.gradle.startParameter.isOffline()) {
		println "Offline: skipping downloading of baseline and JAPICMP"
	  	enabled = false
	}
	else if ("$compatibleVersion" == "SKIP") {
		println "SKIP: Instructed to skip the baseline comparison"
	  	enabled = false
	}
	else {
		println "Will download and perform baseline comparison with ${compatibleVersion}"
	  	dependsOn(downloadBaseline)
	}

	oldClasspath = files("${buildDir}/baselineLibs/reactor-core-${compatibleVersion}.jar")
	newClasspath = files(jar.archiveFile)
	onlyBinaryIncompatibleModified = true
	failOnModification = true
	failOnSourceIncompatibility = true
	txtOutputFile = file("${project.buildDir}/reports/japi.txt")
	ignoreMissingClasses = true
	includeSynthetic = true

	//TODO after a release, bump the gradle.properties baseline
	//TODO after a release, remove the reactor-core exclusions below if any
//	classExcludes = []
//	methodExcludes = ["reactor.core.Scannable#operatorName()"]
}

//complements the javadoc.gradle common configuration
javadoc {
	options.overview = "$rootDir/docs/api/overview.html"

	doLast {
		// work around https://github.com/gradle/gradle/issues/4046
		copy {
			from('src/main/java')
			into "$project.buildDir/docs/javadoc/"
			include "**/doc-files/**/*"
		}
	}
}

// Need https://github.com/Kotlin/dokka/issues/184 to be fixed to avoid "Can't find node by signature" log spam
dokka {
	dependsOn jar
	group = "documentation"
	description = "Generates Kotlin API documentation."

	outputFormat = "html"
	outputDirectory = new File(project.buildDir, "docs/kdoc")
	disableAutoconfiguration = true

	configuration {
		moduleName = "reactor-core"
		jdkVersion = 8
		//this is needed so that links to java classes are resolved.
		doFirst {
			classpath += project.jar.outputs.files.getFiles()
			classpath += project.sourceSets.main.compileClasspath
		}
		sourceRoot {
			path = "src/main/kotlin"
		}
		externalDocumentationLink {
			url = new URL("https://projectreactor.io/docs/core/release/api/")
		}
		externalDocumentationLink {
			url = new URL("https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/")
		}
	}

}

task kdocZip(type: Zip, dependsOn: dokka) {
	//ends up similar to javadoc jar: reactor-core-xxxx.RELEASE-kdoc.zip
	archiveClassifier.set('kdoc')
	from("${project.buildDir}/docs/kdoc")
}


task loops(type: Test, group: 'verification') {
	include '**/*Loop.*'
	doFirst {
		println "Additional tests from `loops` ($includes)"
	}
}

task testNG(type: Test, group: 'verification') {
	useTestNG()
	include '**/*Verification.*'
	doFirst {
		println "Additional tests from `testNG` ($includes)"
	}
}

//inherit basic test task + common configuration in root
//always depend on testNoMicrometer, skip testNG on Travis, skip loops when not releasing
//note that this way the tasks can be run individually
check {
	dependsOn withMicrometerTest
	if (!detectedCiServers.contains("TRAVIS")) {
		dependsOn testNG
	}
	if (!version.endsWith('BUILD-SNAPSHOT')) {
		dependsOn loops
	}
}

//TODO all java9 / stubs / java-specific stuff should go in a convention plugin ?
if (!JavaVersion.current().isJava9Compatible()) {
	test {
		jvmArgs = ["-Xbootclasspath/p:" + configurations.jsr166backport.asPath]
	}
}

jar {
	manifest {
		attributes 'Implementation-Title': 'reactor-core',
			'Implementation-Version': project.version,
			'Automatic-Module-Name': 'reactor.core'
	}
	bnd(bndOptions)
}

jacocoTestReport.dependsOn test
check.dependsOn jacocoTestReport
check.dependsOn japicmp

if (JavaVersion.current().java9Compatible) {
	sourceSets {
		java8stubs.java.srcDirs = ['src/main/java8stubs']
	}

	tasks.withType(JavaCompile).all {
		sourceCompatibility = targetCompatibility = 8
	}

	tasks.withType(Javadoc).all {
		excludes = ["reactor/core/publisher/Traces.java"]
	}

	dependencies {
		compileOnly sourceSets.java8stubs.output
	}
}
else {
	sourceSets {
		java9stubs.java.srcDirs = ['src/main/java9stubs']
	}

	dependencies {
		compileOnly sourceSets.java9stubs.output
	}
}

//add kdoc and docs.zip to the publication
publishing.publications.mavenJava.artifact(kdocZip)
publishing.publications.mavenJava.artifact(rootProject.tasks.docsZip)